Project:
ðŸŸ¦ Sudoku Solver Project â€” Simplified Outline

ðŸ”¹ Part 1: Core Solver (Backtracking Algorithm)
ðŸ“Œ Goal: Build a Python script (solver.py) that can solve any valid Sudoku puzzle using backtracking.
 ðŸ“Œ Modules Used: None (just plain Python).

Day 1 â€“ Setup & Validation
Problem to solve: How do we represent a Sudoku board and check if a number can go in a spot?
Tasks:
Represent board as a 9Ã—9 list of lists (0 = empty cell).

Write is_valid(board, num, pos):

Check row

Check column

Check 3Ã—3 box

Write test cases to check valid/invalid moves.


Day 2 â€“ Finding Empty Cells
Problem to solve: How do we find the next empty space to fill?
Tasks:
Write find_empty(board) â†’ returns (row, col) of first empty cell or None.

Test with boards that have different numbers of empty cells.


Day 3 â€“ Backtracking Solver
Problem to solve: How do we fill the board correctly using recursion + backtracking?
Tasks:
Write solve(board) function:

Find empty cell â†’ if none, solved.

Try numbers 1â€“9.

If valid, place it and recursively call solve().

If it fails, reset cell to 0 (backtrack).

Return True if solved, False if not.


Day 4 â€“ Testing & Print Function
Problem to solve: How do we test the solver and see results clearly?
Tasks:
Write print_board(board) â†’ display neatly.

Run solver on a test puzzle.

Print before & after solving.


ðŸ”¹ Part 2: Graphical User Interface (Tkinter)
ðŸ“Œ Goal: Build an interactive Sudoku app (app.py) that uses the solver.
 ðŸ“Œ Modules Used: tkinter, time (for animation).

Day 5 â€“ Basic GUI Setup
Problem to solve: How do we display a 9Ã—9 Sudoku grid?
Tasks:
Import tkinter.

Create a window (Tk()).

Add a Frame to hold the grid.

Use nested loops to create 9Ã—9 Entry widgets (cells).


Day 6 â€“ Display Puzzle in GUI
Problem to solve: How do we load a puzzle into the GUI?
Tasks:
Import solver functions (from solver import solve, is_valid).

Fill Entry widgets with puzzle numbers (leave empty cells blank).

Style grid:

Read-only for given numbers.

Editable for empty cells.

Bold borders for 3Ã—3 boxes.


Day 7 â€“ Buttons & User Interaction
Problem to solve: How do we solve puzzles directly from the GUI?
Tasks:
Add a Solve button.

Write solve_gui():

Read numbers from Entry widgets into a board.

Call solve(board).

Update Entry widgets with solved board.


Day 8 â€“ Polishing & Extra Features
Problem to solve: How do we make the app user-friendly and resume-worthy?
Tasks:
Add Clear button â†’ resets board.

(Optional) Auto-solve animation:

Use time.sleep() in solve() + update GUI to show step-by-step solving.

(Optional) Validate puzzles before solving.

Add title/instructions at the top of the GUI.


ðŸš€ Final Deliverables
solver.py â†’ handles backtracking solver.

app.py â†’ GUI for Sudoku solving.

A clean, interactive project to showcase.
